{"version":3,"sources":["enums/weekDays.enum.ts","utils/Date.ts","components/DatePicker.tsx","App.tsx","hooks/useLocalStorage.ts","serviceWorker.ts","index.tsx"],"names":["WeekDaysEnum","DateUtils","date1","date2","toISOString","slice","modifiers","holidays","daysOfWeek","modifiersStyles","color","DatePicker","selectedDays","setSelectedDays","month","onMonthChange","onDayClick","day","selected","filter","selectedDay","date","App","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","initialDayOffs","saveDayOffs","React","map","d","Date","dayOffs","setDayOffs","currentMonth","setCurrentMonth","workHoursInCurrentMonth","count","currentDate","getDate","i","setDate","SATURDAY","SUNDAY","includes","getDay","find","dayOff","getWorkDaysCount","className","getMonth","getFullYear","disabled","length","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.78c559c6.chunk.js","sourcesContent":["export enum WeekDaysEnum {\n  SUNDAY = 0,\n  MONDAY = 1,\n  TUESDAY = 2,\n  WEDNESDAY = 3,\n  THURSDAY = 4,\n  FRIDAY = 5,\n  SATURDAY = 6,\n}\n","export const DateUtils = {\n  getDatesDayMonthEqual(date1: Date, date2: Date): boolean {\n    return (\n      date1.toISOString().slice(0, 10) === date2.toISOString().slice(0, 10)\n    );\n  },\n};\n","import DayPicker, { DayModifiers } from 'react-day-picker';\nimport React, { SetStateAction } from 'react';\nimport { DateUtils } from '../utils/Date';\n\nconst modifiers = {\n  holidays: { daysOfWeek: [0, 6] },\n};\n\nconst modifiersStyles = {\n  holidays: {\n    color: 'red',\n  },\n};\n\ninterface Props {\n  selectedDays: Date[];\n  setSelectedDays: React.Dispatch<SetStateAction<Date[]>>;\n  month?: Date;\n  onMonthChange?: (date: Date) => void;\n}\n\nexport function DatePicker({\n  selectedDays,\n  setSelectedDays,\n  month,\n  onMonthChange,\n}: Props) {\n  function handleDayClick(day: Date, { selected }: DayModifiers) {\n    if (selected) {\n      setSelectedDays(selectedDays =>\n        selectedDays.filter(selectedDay =>\n          DateUtils.getDatesDayMonthEqual(selectedDay, day),\n        ),\n      );\n      return;\n    }\n    setSelectedDays(selectedDays => [...selectedDays, day]);\n  }\n\n  function handleMonthChange(date: Date) {\n    if (onMonthChange) {\n      onMonthChange(date);\n    }\n  }\n\n  return (\n    <DayPicker\n      modifiers={modifiers}\n      modifiersStyles={modifiersStyles}\n      onDayClick={handleDayClick}\n      selectedDays={selectedDays}\n      month={month}\n      onMonthChange={handleMonthChange}\n    />\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport 'react-day-picker/lib/style.css';\nimport { DatePicker } from './components/DatePicker';\nimport { WeekDaysEnum } from './enums/weekDays.enum';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { DateUtils } from './utils/Date';\n\nconst DEFAULT_WORK_DAY_HOURS = 8;\nconst DAY_OFF_SAVE_KEY = 'DAY_OFF';\n\nfunction App() {\n  const [initialDayOffs, saveDayOffs] = useLocalStorage<Date[]>(\n    DAY_OFF_SAVE_KEY,\n    [],\n  );\n  const [dayOffs, setDayOffs] = React.useState<Date[]>(\n    initialDayOffs.map(d => new Date(d)),\n  );\n\n  const [currentMonth, setCurrentMonth] = React.useState(new Date());\n\n  function getWorkDaysCount(): number {\n    let count = 0;\n    const currentDate = currentMonth.getDate();\n    for (let i = 1; i <= currentDate; i++) {\n      const date = new Date(currentMonth);\n      date.setDate(i);\n      if (\n        [WeekDaysEnum.SATURDAY, WeekDaysEnum.SUNDAY].includes(date.getDay()) ||\n        dayOffs.find(dayOff => DateUtils.getDatesDayMonthEqual(dayOff, date))\n      ) {\n        continue;\n      }\n      count++;\n    }\n    return count;\n  }\n\n  function addDayOff() {\n    saveDayOffs(dayOffs);\n  }\n\n  function onMonthChange(month: Date) {\n    const currentDate = new Date();\n    if (month.getMonth() === currentDate.getMonth()) {\n      setCurrentMonth(currentDate);\n      return;\n    }\n    setCurrentMonth(new Date(month.getFullYear(), month.getMonth() + 1, 0));\n  }\n\n  const workHoursInCurrentMonth = getWorkDaysCount() * DEFAULT_WORK_DAY_HOURS;\n\n  return (\n    <div className=\"app\">\n      <div className=\"content\">\n        <h2>Work hours in current month: {workHoursInCurrentMonth}</h2>\n        <DatePicker\n          selectedDays={dayOffs}\n          setSelectedDays={setDayOffs}\n          month={currentMonth}\n          onMonthChange={onMonthChange}\n        />\n        <button\n          className=\"halfWidth endAlign\"\n          disabled={initialDayOffs.length === dayOffs.length}\n          onClick={addDayOff}\n        >\n          Save day-off\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport function useLocalStorage<T>(\n  key: string,\n  initialValue: T,\n): [T, (value: T) => void] {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value: T) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}